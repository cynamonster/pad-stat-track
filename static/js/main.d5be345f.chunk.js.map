{"version":3,"sources":["history.js","graphql/queries.js","components/PatientList.js","graphql/mutations.js","components/PatientForm.js","components/CreatePatient.js","components/RemovePatient.js","aws-exports.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","listPatients","PatientList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onPatientSelect","e","setState","selectedPatient","target","innerText","id","console","log","state","swal","title","text","buttons","baseline","fourweek","csv","cancel","then","selection","history","push","concat","loading","patients","_this2","API","graphql","graphqlOperation","limit","res","data","items","_this3","map","patient","react_default","a","createElement","onClick","className","key","style","display","justifyContent","anonId","height","renderPatientList","alignItems","react_router_dom","to","Component","createPatient","deletePatient","createMeasurement","updateMeasurement","deleteMeasurement","PatientForm","handleMeasurements","capturedMeasurements","length","entryExisted","abi_before","abi_after","nirs_before","nirs_after","endo_de","endo_in","nirs_gastroc_before","nirs_gastroc_after","notes","onChange","defineProperty","value","onSubmission","preventDefault","input","type","catch","err","measurementPatientId","activeMeasurements","match","params","response","getPatient","measurements","filter","measurement","react","margin","getAnonId","width","background","_this4","renderHeader","onSubmit","disabled","defaultValue","marginBottom","CreatePatient","flexDirection","marginTop","RemovePatient","selectedId","icon","danger","dangerMode","paddingTop","renderRemovePatient","awsmobile","aws_project_region","aws_appsync_graphqlEndpoint","aws_appsync_region","aws_appsync_authenticationType","aws_appsync_apiKey","aws_cognito_identity_pool_id","aws_cognito_region","aws_user_pools_id","aws_user_pools_web_client_id","oauth","Amplify","configure","aws_exports","App","activePatient","activeMeasurement","react_router","path","exact","component","withAuthenticator","includeGreetings","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5be345f.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const getPatient = `query GetPatient($id: ID!) {\n  getPatient(id: $id) {\n    id\n    anonId\n    measurements {\n      items {\n        id\n        type\n        date\n        abi_before\n        abi_after\n        nirs_before\n        nirs_after\n        endo_de\n        endo_in\n        nirs_gastroc_before\n        nirs_gastroc_after\n        notes\n      }\n      nextToken\n    }\n  }\n}\n`;\nexport const listPatients = `query ListPatients(\n  $filter: ModelPatientFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listPatients(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      anonId\n      measurements {\n        nextToken\n      }\n    }\n    nextToken\n  }\n}\n`;\nexport const getMeasurement = `query GetMeasurement($id: ID!) {\n  getMeasurement(id: $id) {\n    id\n    type\n    patient {\n      id\n      anonId\n      measurements {\n        nextToken\n      }\n    }\n    date\n    abi_before\n    abi_after\n    nirs_before\n    nirs_after\n    endo_de\n    endo_in\n    nirs_gastroc_before\n    nirs_gastroc_after\n    notes\n  }\n}\n`;\nexport const listMeasurements = `query ListMeasurements(\n  $filter: ModelMeasurementFilterInput\n  $limit: Int\n  $nextToken: String\n) {\n  listMeasurements(filter: $filter, limit: $limit, nextToken: $nextToken) {\n    items {\n      id\n      type\n      patient {\n        id\n        anonId\n      }\n      date\n      abi_before\n      abi_after\n      nirs_before\n      nirs_after\n      endo_de\n      endo_in\n      nirs_gastroc_before\n      nirs_gastroc_after\n      notes\n    }\n    nextToken\n  }\n}\n`;\n","import React, { Component } from 'react';\nimport { listPatients } from '../graphql/queries';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { Link } from 'react-router-dom';\nimport swal from 'sweetalert';\n// import { Redirect, Route, Link, Switch, withRouter } from 'react-router-dom';\n// import PatientForm from './PatientForm';\nimport history from '../history';\nimport './PatientList.css';\n\n\nclass PatientList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n            patients: [],\n            selectedPatient: null,\n        }\n    }\n    componentDidMount() {\n        this.setState({ loading: true })\n        API.graphql(graphqlOperation(listPatients, {\n            limit: 1000\n        })).then(\n            res => {\n                console.log(res);\n                this.setState({ patients: res.data.listPatients.items })\n                console.log(this.state.patients);\n            }\n        );\n    } \n  \n    onPatientSelect = e => {\n\n        this.setState({\n            selectedPatient: e.target.innerText,\n            id: e.target.id\n        }, () => {\n            console.log('state1:',this.state);\n            // select the array or id correlating to the selected anonId\n            swal({\n                title: this.state.selectedPatient,\n                text: 'Select measurements to modify:',\n                buttons: {\n                    baseline: 'Baseline Measurements',\n                    fourweek: 'Four Week Measurements',\n                    csv: 'Export Patient CSV',\n                    cancel: 'Cancel'\n                }\n            })\n                .then((selection) => {\n                    switch (selection) {\n                        case 'baseline':\n                            // Pass patient id\n                            history.push(`/pad-stat-track/form/${this.state.id}/init`);\n                            break;\n                        case 'fourweek':\n                            // Pass patient id\n                            history.push(`/pad-stat-track/form/${this.state.id}/four`);\n                            break;\n                        case 'csv':\n                            // export emailable/downloadable .csv of database\n                            break;\n                        default:\n                            break;\n                    }\n                });\n        });\n    }\n\n    // Alphabetize (Alphanumeric) patient list items?\n    renderPatientList() {\n        if (!this.state.patients) {\n            return (\n                <div className=\"ui segment\" style={{ height: '100vh' }}>\n                    <div className=\"ui active inverted dimmer\">\n                        <div className=\"ui text loader\">\n                            Loading...\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n        return (\n            this.state.patients.map(patient => {\n                return (\n                    <div\n                        onClick={this.onPatientSelect}\n                        className=\"item\"\n                        key={patient.id}>\n\n                        <div style={{ display: 'flex', justifyContent: 'space-around' }}\n                            className=\"header\"\n                            \n                            id={patient.id}\n                        >{patient.anonId}\n                        </div>\n\n                    </div>\n                );\n            })\n        );\n    }\n\n    \n\n    render() {\n\n        return (\n            <div>\n\n                <div\n                    className=\"ui middle aligned selection divided list massive\"\n                >\n\n                    {\n                        this.renderPatientList()\n                    }\n                </div>\n\n                <div className=\"ui\">\n\n                    <div className=\"ui header\" style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'center' }}>\n\n                        <Link to=\"/pad-stat-track/remove\" className=\"ui button large red\"><i className=\"icon minus circle\" />Remove Patient</Link>\n\n                        <Link to=\"/pad-stat-track/create\" className=\"ui button large primary\"><i className=\"icon plus circle\" />Add Patient</Link>\n\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default PatientList;","// eslint-disable\n// this is an auto generated file. This will be overwritten\n\nexport const createPatient = `mutation CreatePatient($input: CreatePatientInput!) {\n  createPatient(input: $input) {\n    id\n    anonId\n    measurements {\n      items {\n        id\n        type\n        date\n        abi_before\n        abi_after\n        nirs_before\n        nirs_after\n        endo_de\n        endo_in\n        nirs_gastroc_before\n        nirs_gastroc_after\n        notes\n      }\n      nextToken\n    }\n  }\n}\n`;\nexport const updatePatient = `mutation UpdatePatient($input: UpdatePatientInput!) {\n  updatePatient(input: $input) {\n    id\n    anonId\n    measurements {\n      items {\n        id\n        type\n        date\n        abi_before\n        abi_after\n        nirs_before\n        nirs_after\n        endo_de\n        endo_in\n        nirs_gastroc_before\n        nirs_gastroc_after\n        notes\n      }\n      nextToken\n    }\n  }\n}\n`;\nexport const deletePatient = `mutation DeletePatient($input: DeletePatientInput!) {\n  deletePatient(input: $input) {\n    id\n    anonId\n    measurements {\n      items {\n        id\n        type\n        date\n        abi_before\n        abi_after\n        nirs_before\n        nirs_after\n        endo_de\n        endo_in\n        nirs_gastroc_before\n        nirs_gastroc_after\n        notes\n      }\n      nextToken\n    }\n  }\n}\n`;\nexport const createMeasurement = `mutation CreateMeasurement($input: CreateMeasurementInput!) {\n  createMeasurement(input: $input) {\n    id\n    type\n    patient {\n      id\n      anonId\n      measurements {\n        nextToken\n      }\n    }\n    date\n    abi_before\n    abi_after\n    nirs_before\n    nirs_after\n    endo_de\n    endo_in\n    nirs_gastroc_before\n    nirs_gastroc_after\n    notes\n  }\n}\n`;\nexport const updateMeasurement = `mutation UpdateMeasurement($input: UpdateMeasurementInput!) {\n  updateMeasurement(input: $input) {\n    id\n    type\n    patient {\n      id\n      anonId\n      measurements {\n        nextToken\n      }\n    }\n    date\n    abi_before\n    abi_after\n    nirs_before\n    nirs_after\n    endo_de\n    endo_in\n    nirs_gastroc_before\n    nirs_gastroc_after\n    notes\n  }\n}\n`;\nexport const deleteMeasurement = `mutation DeleteMeasurement($input: DeleteMeasurementInput!) {\n  deleteMeasurement(input: $input) {\n    id\n    type\n    patient {\n      id\n      anonId\n      measurements {\n        nextToken\n      }\n    }\n    date\n    abi_before\n    abi_after\n    nirs_before\n    nirs_after\n    endo_de\n    endo_in\n    nirs_gastroc_before\n    nirs_gastroc_after\n    notes\n  }\n}\n`;\n","import React, { Component, Fragment } from 'react';\nimport { getPatient } from '../graphql/queries';\nimport { createMeasurement, updateMeasurement } from '../graphql/mutations';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport './PatientForm.css';\nimport { Link } from 'react-router-dom';\nimport history from '../history';\n\nclass PatientForm extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            activeMeasurements: '',\n            id: null,\n            type: \"\",\n            entryExisted: false,\n            loading: false,\n            patient: \"\",\n            abi_before: null,\n            abi_after: null,\n            nirs_before: null,\n            nirs_after: null, \n            endo_de: null,\n            endo_in: null,\n            nirs_gastroc_before: null,\n            nirs_gastroc_after: null,\n            notes: null\n        }\n    }\n    async componentDidMount() {\n        this.setState({ loading: true, id: this.props.match.params.id })\n\n        // Check props to determine whether these are \n        // INITAL or FOURWEEK metrics and setState appropriately.\n        if (this.props.match.params.type === \"init\") {\n            this.setState({ type: 'Initial' });\n            \n        } else if (this.props.match.params.type === \"four\") {\n            this.setState({ type: 'FourWeek' });\n        }\n\n        // Query DB (using the patient id passed as a prop via the route) to attain the patient's AnonId\n        await API.graphql(graphqlOperation(getPatient, { id: this.props.match.params.id } ))\n        .then(response => {\n            // console.log('res:', response.data.getPatient.measurements.items)\n            this.setState({ \n                activeMeasurements: response.data.getPatient.measurements.items,\n                loading: false,\n                patient: response.data.getPatient.anonId,\n                \n            })\n    \n\n        })\n        \n        // const initialMeasurement = this.state.activeMeasurements.filter(\n        //     measurement => measurement.type === \"Initial\"\n        // );\n        // const fourWeekMeasurement = this.state.activeMeasurements.filter(\n        //     measurement => measurement.type === \"FourWeek\"\n        // );\n\n        const capturedMeasurements = this.state.activeMeasurements.filter(\n            measurement => measurement.type === this.state.type\n        );\n        console.log('mez',capturedMeasurements)\n\n        this.handleMeasurements(capturedMeasurements)\n        \n        \n\n        // Query DB to attain the patient's measurements\n        console.log('props:',this.state.type);\n\n            // if ( metrics.data.getMeasurement ) {\n            //     console.log('yes',metrics);\n\n            //     var finalMetrics = metrics.data.getMeasurement;\n                \n            //    \n            // }\n        \n        // Select the most recent measurements\n\n            \n\n    }\n\n    handleMeasurements = capturedMeasurements => {\n        if ( capturedMeasurements.length === 0 ) {\n            // create new\n        } else {\n            this.setState({ \n                id: capturedMeasurements[0].id,\n                entryExisted: true,\n                abi_before: capturedMeasurements[0]['abi_before'],\n                abi_after: capturedMeasurements[0]['abi_after'],\n                nirs_before: capturedMeasurements[0]['nirs_before'],\n                nirs_after: capturedMeasurements[0]['nirs_after'],\n                endo_de: capturedMeasurements[0]['endo_de'],\n                endo_in: capturedMeasurements[0]['endo_in'],\n                nirs_gastroc_before: capturedMeasurements[0]['nirs_gastroc_before'],\n                nirs_gastroc_after: capturedMeasurements[0]['nirs_gastroc_after'],\n                notes: capturedMeasurements[0]['notes']\n        \n                },() => console.log('active',this.state));\n        }\n    }\n\n    // REFACTOR STATE ASSIGNMENTS?\n    // fetchInitialState = (finalMetrics, key) => {\n    //     for (key in finalMetrics.length) {\n    //         this.setState({ [key]: finalMetrics[key] },\n    //         () => console.log(key,':',this.state[key]));\n    //     }\n    // }\n\n    onChange = (e, key) => {\n        this.setState({ [key]: e.target.value },\n            () => console.log(key,':',this.state[key]),\n            \n        );\n    }\n\n    onSubmission = e => {\n        e.preventDefault();\n        // console.log(e.target.keyCode);\n        // if records already exist, updateMeasurement instead\n        if (this.state.entryExisted) {\n            API.graphql(graphqlOperation(updateMeasurement, {\n              input: {\n                    // could this be a for-loop?\n                    id: this.state.id,\n                    type: this.state.type,\n                    abi_before: this.state.abi_before,\n                    abi_after: this.state.abi_after,\n                    nirs_before: this.state.nirs_before,\n                    nirs_after: this.state.nirs_after,\n                    endo_de: this.state.endo_de,\n                    endo_in: this.state.endo_in,\n                    nirs_gastroc_before: this.state.nirs_gastroc_before,\n                    nirs_gastroc_after: this.state.nirs_gastroc_after,\n                    notes: this.state.notes\n                }\n            })).then(\n                res => { console.log('res:',res); }\n            ).catch(err => {\n                console.log('err:',err);\n            });\n\n            history.push('/pad-stat-track/');\n        } else {\n            API.graphql(graphqlOperation(createMeasurement, {\n                input: {\n                    measurementPatientId: this.state.id,\n                    // could this be a for-loop?\n                    type: this.state.type,\n                    abi_before: this.state.abi_before,\n                    abi_after: this.state.abi_after,\n                    nirs_before: this.state.nirs_before,\n                    nirs_after: this.state.nirs_after,\n                    endo_de: this.state.endo_de,\n                    endo_in: this.state.endo_in,\n                    nirs_gastroc_before: this.state.nirs_gastroc_before,\n                    nirs_gastroc_after: this.state.nirs_gastroc_after,\n                    notes: this.state.notes\n                }\n            })).then(\n                res => { console.log('res(create):',res); }\n            ).catch(err => {\n                console.log('err(create):',err);\n            });\n\n            history.push('/pad-stat-track/');\n        }\n        }\n\n    getAnonId() {\n        if (!this.state.patient) {\n            return <h5>Loading Patient...</h5>;\n        }\n        return <h3>{ this.state.patient }</h3>;\n    }\n    \n\n    inputRender() {\n        if ( !this.state.abi_before ) {\n            return (\n                <div className=\"ui input field large form-input\">\n                    <label>ABI (Before)\n                        <input \n                            type=\"number\" \n                            onChange={ (e) => this.onChange(e, 'abi_before') } \n                        />\n                    </label>\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"ui input field large form-input\">\n                <label>ABI (Before)\n                    <input \n                        type=\"number\" \n                        onChange={ (e) => this.onChange(e, 'abi_before') } \n                        value={ this.state.abi_before } \n                    />\n                </label>\n            </div>\n        );\n    }\n\n    renderHeader() {\n        if (!this.state.patient) {\n            return (\n                <div className=\"ui active dimmer inverted\" style={{ width: 'auto', margin: '0 50%', height: '10vh', background: 'rgba(0,0,0,0)' }}>\n                   <div className=\"ui text loader\"></div>\n                </div>\n            );\n        }\n        return (\n            <Fragment>\n                <Link to=\"/pad-stat-track/\" className=\"ui button\"><i className=\"icon chevron left\" />Return to List</Link>\n                <div className=\"ui small center aligned header\" style={{ margin: 0 }} >\n                    Patient: { this.getAnonId() }\n                </div>\n            </Fragment>\n        );\n    }\n\n\n    render() {\n        return (\n            <div className=\"ui container\">\n                    \n                <div className=\"ui block header\" style={{ height: '10vh', display: 'flex', justifyContent: 'space-around', alignItems: 'center' }}>\n                    {\n                        this.renderHeader()\n                    }\n                </div>\n\n                <form \n                    className=\"ui form\"\n                    onSubmit={this.onSubmission}\n                >\n                    \n                    <div className=\"ui input field large form-input\">\n                        <label>Patient ID\n                            <input type=\"text\" disabled value={this.state.patient} onChange={this.onChange} />\n                        </label>\n                    </div>\n\n                    <br />\n                    \n                    <div className=\"ui input field large form-input\">\n                        <label>ABI (Before)\n                            <input \n                                type=\"number\" \n                                onChange={ (e) => this.onChange(e, 'abi_before') } \n                                defaultValue={ this.state.abi_before } \n                            />\n                        </label>\n                    </div>\n\n                    <br />\n                    \n                    <div className=\"ui input field large form-input\">\n                        <label>ABI (After)\n                            <input \n                                defaultValue={ this.state.abi_after }\n                                type=\"number\" \n                                onChange={ (e) => {\n                                this.onChange(e, 'abi_after')\n                            } } />\n                        </label>\n                    </div>\n                    <br />\n                    <div className=\"ui input field large form-input\">\n                        <label>NIRS (Before)\n                            <input \n                                defaultValue={ this.state.nirs_before }\n                                type=\"number\" \n                                onChange={ (e) => {\n                                this.onChange(e, 'nirs_before')\n                            } } />\n                        </label>\n                    </div>\n                    <br />\n                    <div className=\"ui input field large form-input\">\n                        <label>NIRS (After)\n                            <input \n                                type=\"number\" \n                                defaultValue={ this.state.nirs_after }\n                                onChange={ (e) => {\n                                this.onChange(e, 'nirs_after')\n                            } } />\n                        </label>\n                    </div>\n                    <br />\n                    <div className=\"ui input field large form-input\">\n                        <label>Endothelium Dependent FMD\n                            <input \n                                defaultValue={ this.state.endo_de }\n                                type=\"number\" \n                                onChange={ (e) => {\n                                this.onChange(e, 'endo_de')\n                            } } />\n                        </label>\n                    </div>\n                    <br />\n                    <div className=\"ui input field large form-input\">\n                        <label>Endothelium Independent FMD\n                            <input \n                                defaultValue={ this.state.endo_in }\n                                type=\"number\" \n                                onChange={ (e) => {\n                                this.onChange(e, 'endo_in')\n                            } } />\n                        </label>\n                    </div>\n                    <br />\n                    <div className=\"ui input field large form-input\">\n                        <label>NIRS Gastroc Soleus (Before)\n                            <input \n                                defaultValue={ this.state.nirs_gastroc_before }\n                                type=\"number\" \n                                onChange={ (e) => {\n                                this.onChange(e, 'nirs_gastroc_before')\n                            } } />\n                        </label>\n                    </div>\n                    <br />\n                    <div className=\"ui input field large form-input\">\n                        <label>NIRS Gastroc Soleus (After)\n                            <input \n                                defaultValue={ this.state.nirs_gastroc_after }\n                                type=\"number\" \n                                onChange={ (e) => {\n                                this.onChange(e, 'nirs_gastroc_after')\n                            } } />\n                        </label>\n                    </div>\n                    <br />\n                    <div className=\"ui input field large form-input\">\n                        <label>Notes\n                            <input \n                                defaultValue={ this.state.notes }\n                                type=\"text\" \n                                onChange={ (e) => {\n                                this.onChange(e, 'notes')\n                            } } />\n                        </label>\n                    </div>\n                    <br />\n                    {/* onclick: save entries to db */}\n                    <button onClick={this.onSubmission} className=\"ui button large primary\" style={{ marginBottom: '2rem' }}>\n                            Save and Return\n                    </button>\n                </form>\n            </div>\n          \n        );\n    }\n}\n\nexport default PatientForm;","import React, { Component } from 'react';\n// import { listPatientsQuery } from '../graphql/queries';\nimport { createPatient } from '../graphql/mutations';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport history from '../history';\n\nclass CreatePatient extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            loading: false,\n            patient: null,\n        }\n    }\n    onChange = e => { \n        this.setState({ patient: e.target.value },\n        () => console.log(this.state.patient));\n    }\n\n    onSubmission = e => {\n        e.preventDefault();\n        API.graphql(graphqlOperation(createPatient, {\n            input: {\n                anonId: this.state.patient,\n            }\n        })).then(\n            res => { console.log(res); }\n        ).catch(err => {\n            console.log(err);\n        });\n\n        history.push('/pad-stat-track/');\n    }\n     \n    render() {\n        return (\n            <div className=\"ui raised very padded text container segment\" style={{ height: '40vh', display: 'flex', flexDirection: 'column', justifyContent: 'space-around', alignItems: 'center', marginTop: '2rem' }}>\n                <form onSubmit={this.onSubmission} className=\"ui form\">\n                    \n                    <div className=\"ui input field huge\">\n                        <label>Patient Name\n                            <input type=\"text\" onChange={ e => this.onChange(e) } />\n                        </label>\n                    </div>\n\n                </form>\n\n                <div className=\"ui two column grid\">\n                    <div className=\"row\">\n                        <div className=\"column\">\n                            <button \n                                onClick={ () => history.push('/pad-stat-track/') } \n                                className=\"ui button huge\"\n                            >\n                                Discard\n                            </button>\n\n                        </div>\n                        <div className=\"column\">\n                            <button \n                                onClick={ this.onSubmission } \n                                className=\"ui button huge green\"\n                            >\n                                Submit\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n          \n        );\n    }\n}\n\nexport default CreatePatient;\n\n","import React, { Component } from 'react';\nimport { listPatients } from '../graphql/queries';\nimport { deletePatient, deleteMeasurement } from '../graphql/mutations';\nimport { API, graphqlOperation } from 'aws-amplify';\nimport { Link } from 'react-router-dom';\nimport swal from 'sweetalert';\n// import { Redirect, Route, Link, Switch, withRouter } from 'react-router-dom';\n// import PatientForm from './PatientForm';\nimport history from '../history';\nimport './PatientList.css';\n\n\nclass RemovePatient extends Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            loading: false,\n            patients: [],\n            selectedPatient: null\n        }\n    }\n    componentDidMount() {\n        this.setState({ loading: true })\n        API.graphql(graphqlOperation(listPatients)).then(\n            res => {\n                this.setState({ patients: res.data.listPatients.items })\n                console.log(this.state.patients);\n            }\n        )       \n    }\n \n    onPatientSelect = e => {\n\n        this.setState({ \n            selectedPatient: e.target.innerText,\n            id: e.target.id\n        }, () => {\n            console.log(this.state);\n\n            const selectedId = this.state.patients.filter(\n                patient => patient.anonId === this.state.selectedPatient\n            );\n            // select the array or id correlating to the selected anonId\n            swal({            \n                title: 'Delete ' + this.state.selectedPatient + '?',\n                text: 'This cannot be undone.',\n                icon: 'warning',\n                buttons: {\n                    danger: 'Yes',\n                    cancel: 'No'\n                },\n                dangerMode: true\n            })\n            .then((selection) => {\n                if(selection) {\n                    swal(\"Patient record deleted!\", {\n                        icon: 'success'\n                    })\n                    API.graphql(graphqlOperation(deletePatient, { input: { id: selectedId[0].id } } ))\n                    .then(\n                        res => console.log('res',res)\n                    ).catch(\n                        err => console.log('err',err)\n                    )\n                    API.graphql(graphqlOperation(deleteMeasurement, { input: { id: this.state.selectedPatient } } ))\n                    .then(\n                        res => console.log('res',res)\n                    ).catch(\n                        err => console.log('err',err)\n                    )\n                    history.push('/pad-stat-track/')\n                }\n            });\n        });\n    }\n    \n    renderRemovePatient() {\n        if(!this.state.patients) {\n            return (\n                <div className=\"ui segment\" style={{height: '100vh'}}>\n                    <div className=\"ui active inverted dimmer\">\n                        <div className=\"ui text loader\">\n                            Loading...\n                        </div>\n                    </div>            \n                </div> \n            );\n        }\n        return (\n            this.state.patients.map(patient => {\n                return (\n                    <div \n                        onClick={ this.onPatientSelect }\n                        className=\"item\">\n                        \n                        <div style={{ display:'flex', justifyContent: 'space-around' }} \n                            className=\"header\" \n                            key={ patient.id } \n                            id={ patient.id }\n                            >{ patient.anonId }\n                        </div>\n                        \n                    </div>\n                );\n            })\n        );\n    }\n\n    render() {\n        \n        return(\n            <div style={{ paddingTop: '2rem' }}>\n\n                <div className=\"ui\">\n                    <div className=\"ui header\" style={{ display: 'flex', justifyContent: 'space-around', alignItems: 'center' }}>\n                        \n                        <Link to=\"/pad-stat-track/\" className=\"ui button large\"><i className=\"icon chevron left\" />Return to List</Link>\n\n                        <h2 style={{margin: 0}}>Delete a Patient</h2>\n\n                    </div>\n                </div>\n                \n                <div className=\"ui middle aligned selection divided list massive\">\n                    \n                    { \n                        this.renderRemovePatient()\n                    }\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default RemovePatient;","// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-1\",\n    \"aws_appsync_graphqlEndpoint\": \"https://za44xongffhsvep5zl6nrkox2m.appsync-api.us-east-1.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-1\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-cotuvc36rjb3rpizlkodgrghn4\",\n    \"aws_cognito_identity_pool_id\": \"us-east-1:800fa0c4-b6ec-4dba-81e5-e338445d7ede\",\n    \"aws_cognito_region\": \"us-east-1\",\n    \"aws_user_pools_id\": \"us-east-1_NptgiYIhb\",\n    \"aws_user_pools_web_client_id\": \"11s0cuc6tauml1n1pf1rnt544e\",\n    \"oauth\": {}\n};\n\n\nexport default awsmobile;\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Router, Route } from 'react-router-dom';\nimport history from './history';\n\n// components\nimport PatientList from './components/PatientList';\nimport PatientForm from './components/PatientForm';\nimport CreatePatient from './components/CreatePatient';\nimport RemovePatient from './components/RemovePatient';\n\n// Amplify, Auth\nimport Amplify from 'aws-amplify';\nimport { withAuthenticator } from 'aws-amplify-react';\nimport aws_exports from './aws-exports';\nAmplify.configure(aws_exports);\n\nclass App extends Component {\n  state = {\n    activePatient: {},\n    activeMeasurement: {}\n  }\n\n  render() {\n    console.log() \n    return (\n      <Router history={history}>\n        <div className=\"App\">\n          {/* <Route path=\"/\" exact component={Authenticate} /> */}\n          <Route path={'/pad-stat-track/'} exact component={PatientList} />\n          <Route path={'/pad-stat-track/form/:id/:type'} component={PatientForm} />\n          <Route path={'/pad-stat-track/create'} component={CreatePatient} />\n          <Route path={'/pad-stat-track/remove'} component={RemovePatient} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default withAuthenticator(App, { includeGreetings: true });\n// export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}